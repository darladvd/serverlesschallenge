service: challenge1
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: '20201221'
  iamRoleStatements:
    - Effect: "Allow"
      Action: "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action: "apigateway:*"
      Resource: "*"
    - Effect: "Allow"
      Action: "s3:*"
      Resource: "*"
  environment:
    DYNAMODB_CARDS_TABLE_NAME: challenge1 
    S3_BUCKETNAME: serverlesschallenge-darla
    QUEUE_URL: https://sqs.us-east-1.amazonaws.com/874957933250/challenge1-dev-jobs

functions:
  createLoyaltyCard:
    handler: handler.create_loyalty_card
    events:
      - http:
          path: /challenge1
          method: post
  getAllLoyaltyCards:
    handler: handler.get_all_loyalty_card
    events:
      - http:
          path: /challenge1
          method: get
  getOneLoyaltyCard:
    handler: handler.get_one_loyalty_card
    events:
      - http:
          path: /challenge1
          method: get
  prepareSQSjob:
    handler: handler.prepare_sqs_job
    events:
      - s3:
          bucket: serverlesschallenge-darla
          event: s3:ObjectCreated:Put
          existing: true 
          rules:
            - suffix: .csv
  # runSQSjob:
  #   handler: handler.run_sqs_job
  #   events:
  #     - httpApi:
  #         path: /challenge1
  #         method: post
  #     - s3:
  #         bucket: ${construct:bucket.bucketName}
  #         existing: true
  #   environment:
  #     QUEUE_URL: ${construct:jobs.queueUrl}
  #     STORAGE_BUCKET: ${construct:bucket.bucketName}
  

#decrease size of deployment package
package:
  exclude:
    - venv/**
    - node_modules/**

#cloud formation code for deploying dynamodb
resources:
  Resources:
    LoyaltyCardDynamodbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: card_number #primary key
            AttributeType: S
          - AttributeName: email #gsi
            AttributeType: S
        KeySchema:
          - AttributeName: card_number
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_CARDS_TABLE_NAME}
        GlobalSecondaryIndexes:
            - IndexName: emailIndex
              KeySchema:
                - AttributeName: email
                  KeyType: HASH
              Projection:
                ProjectionType: ALL

plugins:
  - serverless-python-requirements